const genome = @import_module("cerebraslib/genome_bitdrift.csl");
const population = @import_module("cerebraslib/population.csl", .{
    .popSize = 100, .genomeWords = genome.genomeWords,
    .fitFun = genome.calc_fitness, .mutFun = genome.apply_mutation,
    .tournamentSize = 3,
});

// internal accessors ======================================================
fn test_calc_ith_fitness() void { population._calc_ith_fitness(0); }

fn test_do_ith_mutaiton() void { population._do_ith_mutation(0); }

fn test_get_ith_genome() void { population._get_ith_genome(0); }

fn test_get_population_word() void { population._get_population_word(0); }

fn test_get_swap_word() void { population._get_swap_word(0); }

fn test_sample_one_tournament() void {
    population._sample_one_tournament();
}

fn test_scale_by_genome_words() void {
    population._scale_by_genome_words(0);
}

// internal routines ==========================================================
fn test_eval_population_fitnesses() void {
    population._eval_population_fitnesses();
}

fn test_mutate_population() void { population._mutate_population(); }

fn test_perform_selection() void { population._perform_selection(); }

fn test_sample_n() void {
    population._sample_n(1);
    population._sample_n(2);
    population._sample_n(100);
    population._sample_n(99);
    population._sample_n(2);
}

// public API =================================================================
fn test_emigrate_genomes() void {
    population.emigrate_genomes(population.swapDsd, 10);
}

fn test_immigrate_genomes() void {
    population.immigrate_genomes(population.swapDsd, 10);
}

fn test_do_generaiton() void { population.do_generation(); }

// test runner ================================================================
fn do_test() void {
    test_calc_ith_fitness();
    test_do_ith_mutaiton();
    test_get_ith_genome();
    test_get_population_word();
    test_get_swap_word();
    test_sample_one_tournament();
    test_scale_by_genome_words();
    test_eval_population_fitnesses();
    test_mutate_population();
    test_perform_selection();
    test_sample_n();
    test_emigrate_genomes();
    test_immigrate_genomes();
    test_do_generaiton();
}
