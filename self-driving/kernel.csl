// global output variable
var cycle: u16 = 0;

// kickoff task
// dispatch cycleTask once
const mainColor: color = @get_color(0);
task mainTask() void {
  // The task simply updates the global variable's value.
  const outDsd = @get_dsd(
    fabout_dsd,
    .{
      .extent = 1,
      .fabric_color = cycleColor,
    }
  );
  @mov16(outDsd, 0);
}

// self-activate with incrementing values
// until threshold reached
const cycleColor: color = @get_color(1);
task cycleTask(data: u16) void {
  if (data < 10) {
    const outDsd = @get_dsd(
      fabout_dsd,
      .{
        .extent = 1,
        .fabric_color = cycleColor,
      }
    );
    var next: u16 = data + 1;
    @mov16(outDsd, next);
  }
  cycle = data;
}

comptime {
  // kickoff task
  @bind_task(mainTask, mainColor);
  @activate(mainColor);  // launched at startump

  // self-activating task
  @bind_task(cycleTask, cycleColor);
  @set_local_color_config(
    cycleColor,
    .{
      .routes = .{
        .rx = .{ RAMP },
        .tx = .{ RAMP },
      }
    }
  );
}


layout {
  // how many PE?
  @set_rectangle(2, 2);

  // assign code to each PE
  for (@range(i32, 2)) |x| {
    for (@range(i32, 2)) |y| {
      @set_tile_code(x, y, "kernel.csl");
    }
  }
}
